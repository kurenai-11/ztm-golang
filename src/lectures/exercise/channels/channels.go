//--Summary:
//  Create a program that utilizes goroutines to run the provided calculation
//  function on a number of jobs. The results from the goroutines must be
//  communicated back to the main thread using a channel, and then added
//  together.
//
//--Requirements:
//* Run `longCalculation` for each job generated by the `makeJobs` function
//* Each job must be run in a separate goroutine
//* The result from `longCalculation` must be provided to the main function
//  using a channel
//* Sum the results from each job to generate a final result, and print it
//  to the terminal

package main

import (
	"fmt"
	"math/rand"
	"time"
)

type Job int

func longCalculation(i Job) int {
	duration := time.Duration(rand.Intn(1000)) * time.Millisecond
	time.Sleep(duration)
	fmt.Printf("Job %d complete in %v\n", i, duration)
	return int(i) * 30
}

func makeJobs() []Job {
	jobs := make([]Job, 0, 100)
	for i := 0; i < 100; i++ {
		jobs = append(jobs, Job(rand.Intn(10000)))
	}
	return jobs
}

func runJobs(jobs *[]Job, res *chan int) {
	for _, job := range *jobs {
		go func(job Job) {
			*res <- longCalculation(job)
		}(job)
	}
}

func main() {
	jobs := makeJobs()
	results := make(chan int, 100)
	runJobs(&jobs, &results)
	sum := 0
	count := 0
	for count != len(jobs) {
		result := <-results
		sum += result
		count++
	}
	fmt.Printf("Sum: %d\n", sum)
}
